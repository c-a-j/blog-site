[{"categories":["notes"],"contents":" Date types\u0026nbsp;# Numeric Types Character Types Date/Time Types Other Types Advanced Server NUMERIC CHAR TIMESTAMP BYTEA CLOB INTEGER VARCHAR DATE BOOL BLOB SERIAL TEXT TIME MONEY VARCHAR2 INTERVAL XML NUMBER JSON XMLTYPE JSONB ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-sql-primer/","tags":["edb","sql"],"title":"SQL Primer"},{"categories":["docs"],"contents":" 1. Download and launch SuperPuTTY\u0026nbsp;# 1.1 Download\u0026nbsp;# Download the latest zip archive here. 1.2 Unzip the archive\u0026nbsp;# Unzip the archive and move it to somewhere within the C:\\Users\\{USERNAME} directory. For example, I decided to keep my SuperPuTTY files in C:\\Users\\ClintJordan\\bin, but feel free place them anywhere you like. 1.3 Change the SuperPuTTY icon and pin it\u0026nbsp;# The SuperPuTTY icon will probably be set to the default command prompt icon, which could be confusing if you ever actually use the command prompt. To change the icon, follow the steps below. Right click on the SuperPuTTY executable and click on Create Shortcut Right click on the new shortcut and click on Properties Under the Shortcut tab, click on Change Icon Click Browse Navigate to the PuTTY directory (likely C:\\Program Files\\PuTTY) Double click on the PuTTY executable Select the icon with two computers connected by a lightening bolt Click OK Click Apply then OK If you have PuTTY currently pinned to the taskbar, unpin it Double click on the new shortcut to open SuperPuTTY Right click on the taskbar SuperPuTTY icon and pin it Note: Feel free to choose any icon you like. I chose to use the PuTTY icon because after switching to SuperPuTTY, there aren\u0026rsquo;t any reasons to ever open the standard PuTTY again. More details on this below. 2. Session Configuration\u0026nbsp;# 2.1 Add and organize sessions\u0026nbsp;# There\u0026rsquo;s a few different ways to do this. File -\u0026gt; Import Sessions -\u0026gt; From PuTTY Settings Build a new session directory structure in the SuperPuTTY sessions window Hybrid 1 and 2 approach import all your saved PuTTY sessions organize all the sessions into a directory structure delete all the saved PuTTY profiles except the default modify all SuperPuTTY sessions to use the default PuTTY profile Option 1 will probably get you up and running the quickest. But options 2 and 3 lead to a much more efficient way of handling session settings. To illustrate the advantage of options 2 and 3, let\u0026rsquo;s say you\u0026rsquo;ve accumulated 100 saved PuTTY sessions over the years and now you\u0026rsquo;ve decided that the font size needs to increase. In PuTTY, you would have to load, increase the font size, and save the new settings for all 100 sessions individually. If you decided that the font type needs to change a few weeks later\u0026hellip;same story all over again. Option 1 alone does nothing to remedy this issue. On the other hand, if you have a little time to invest in options 2 or 3, you could reduce the number of saved PuTTY settings from 100 to 1. That\u0026rsquo;s right, you could change any setting in a single PuTTY profile and it will take effect in all 100 of your SuperPuTTY sessions. This tutorial will proceed assuming that you have taken the path of option 2. 2.1.1 Create session directory structure\u0026nbsp;# The sessions window should be visible by default. If it\u0026rsquo;s not visible, select View -\u0026gt; Sessions. Follow the steps below to start creating a session structure. Right click on PuTTY Sessions and select new folder create PROD, DEV, and TEST Create subdirectories within PROD, DEV, and TEST as a starting point, create a PALS folder under TEST Right click on the TEST/PALS folder and select New Session Name = nfs0207 (db) Host Name = fsxnfsx0207.wrk.fs.usda.gov PuTTY Session Profile = Default Settings Now just repeat that process for all new sessions. The above steps just outline a good example, feel free to organize and name sessions however you prefer. Alternatively, if you went with option 3 (the hybrid approach), drag your imported sessions into appropriate folders and then edit all of them so they use the default profile. Now your session window might look something like this: 2.1.2 Clean up PuTTY profiles\u0026nbsp;# It would be a good idea at this point to back up your sessions list. If your list is incomplete and you haven\u0026rsquo;t already done so, you might also want to import your PuTTY Sessions as well. They will populate in a separate folder. To import PuTTY sessions: File -\u0026gt; Import Sessions -\u0026gt; From PuTTY Settings To export SuperPuTTY sessions: File -\u0026gt; Export Sessions Now that all your sessions in SuperPuTTY are backed up and set to use the default session profile, you can simply delete all the now unnecessary PuTTY profiles and start fresh. Access the PuTTY Configurations through Tools -\u0026gt; PuTTY Configuration. Before you do this be sure that the default profile is set up the way you want! Take time to compare your most frequently used sessions to your default profile. Be sure to save everything you want in the default. After you have cleaned up, your PuTTY Configuration window should look like this: If you prefer to have the terminal styled differently depending on the host or type of work being performed, just save a few more general profiles. For example, if you want PROD, DEV, and TEST servers to have different background colors and/or fonts, you could create new profiles called PROD, DEV, and TEST starting with the default. After doing this the PuTTY configuration window would look like the screenshot below and there will be four different profiles to choose from in SuperPuTTY. 3. Set up CAPI authentication\u0026nbsp;# 3.1 Set auto-login username\u0026nbsp;# First, I recommend eliminating the need to type in your account name every time a new session is opened. Open the PuTTY Configurations Tools -\u0026gt; PuTTY Configuration from SuperPuTTY Load the default profile Navigate to Connection -\u0026gt; Data Insert your p-account into the Auto-login username text bar Navigate back to Session Highlight the default profile and click Save If you changed all the SuperPuTTY sessions to use the default profile as outlined in 2 Session Configuration, now your p-account will automatically be inserted when opening new sessions. The purpose of should now be very clear. Let\u0026rsquo;s take the efficiency a step further. 3.2 Configure CAPI authentication\u0026nbsp;# 3.2.1 Add CAPI keys to default PuTTY profile\u0026nbsp;# Open the PuTTY Configurations Load the default profile Navigate to Connection -\u0026gt; SSH -\u0026gt; Certificate Click on Set CAPI Cert Ensure that your certificate is chosen (you may have a list) Click OK Navigate back to Session Highlight the default profile and click Save Note: 3.2.1 must be repeated for all PuTTY profiles. Now open two new sessions, one in the production domain and the other in the dev/test domain. Repeat 3.2.2 - 3.2.4 for each domain. 3.2.2 Check for the existence of the ~/.ssh directory.\u0026nbsp;# $ ls -lad .ssh drwx------ 1 cjordan cjordan 4096 Feb 21 16:02 .ssh If you get ls: cannot access '.sshh': No such file or directory, then the directory must be created. $ mkdir ~/.ssh 3.2.3 Create the ~/.ssh/authorized_keys file.\u0026nbsp;# $ cat \u0026gt; ~/.ssh/authorized_keys After you hit enter on this command, the prompt will drop to the next line and wait for input. Now we must copy the CAPI public key from PuTTY. Open the PuTTY Configurations Load the default profile Navigate to Connection -\u0026gt; SSH -\u0026gt; Certificate Click on Copy to Clipboard Go back to the terminal window and paste in the clipboard contents, press Enter, then Ctrl+D. It should have looked something like this. $ cat \u0026gt; ~/.ssh/authorized_keys ssh-rsa gVVSvgd9lrPUY4rZIQsmDxsN6JljDI42GlgwVtQNxaek9KcLn9lEEC8R CAPI:69862ffda995 CN=JOHN DOE + OID.1.1=1200, OU=Department of Agriculture, O=U.S. Government, C=US Note: Your key will be much longer than this. I have stripped out many characters from mine for example. Output the ~/.ssh/authorized_keys file and check the contents. It might be a good idea to open a Notepad file and paste in the CAPI key for comparison. cat ~/.ssh/authorized_keys It should start with ssh-rsa and end with C=US. 3.2.4 Remove group permissions on ~/.ssh and ~/.ssh/authorized_keys.\u0026nbsp;# $ chmod 700 ~/.ssh $ chmod 600 ~/.ssh/authorized_keys Check the permissions. $ ls -lad ~/.ssh drwx------ 1 cjordan cjordan 4096 Feb 21 16:02 /home/cjordan/.ssh $ ls -la ~/.ssh/authorized_keys -rw------- 1 cjordan cjordan 546 Mar 2 16:18 authorized_keys If the previous steps were followed correctly, you should now be able to log into new SuperPuTTY sessions with your PIV credentials. Nifty! 4. Configure helpful hot keys\u0026nbsp;# 4.1 Moving through tabs\u0026nbsp;# When doing work in a terminal, it\u0026rsquo;s more efficient to switch over to the mouse as little as possible. To achieve this workflow in SuperPuTTY, we need to set a few hot keys. Tools -\u0026gt; Options -\u0026gt; Shortcuts Look for two items in this window, NextTab and PrevTab. Set them to whatever you like. For example, I have mine set to Ctrl+. and Ctrl+, for NextTab and PrevTab, respectively. This might seem like a strange choice at first glance, but those are also the keys for \u0026gt; and \u0026lt;, which may make a little more sense. Additionally, I have tmux set up to change windows with those same keys, but using Alt instead of Ctrl. For some reason that is completely mysterious to me, SuperPuTTY allows for changing tabs while maintaining the cursor focus in another tab. This means that it\u0026rsquo;s often possible to unintentionally send keys to tabs that you aren\u0026rsquo;t even looking at. For this reason, you may want to set another key to change focus to the visible tab to avoid having to switch to the mouse for a click. Go back to Tools -\u0026gt; Options -\u0026gt; Shortcuts and look for FocusActiveSession and set it to anything you like. I set mine to Ctrl+f. ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/docs/superputty-setup/","tags":["workflow","superputty"],"title":"SuperPuTTY Setup"},{"categories":["notes"],"contents":" Access control - pg_hba.conf\u0026nbsp;# host based access control file located in the cluster data directory read at startup, any change required reload contain set of records, one per line search record specifies connection type, database name, user name, client IP and method of authentication; top to bottom read hostnames, IPv6 and IPv4 supported authentication methods, trust, reject, md5, password, gss, sspi, krb5, ident, peer, pam, ldap, radius, bsd, scram or cert Row Level Security (RLS)\u0026nbsp;# GRANT and REVOKE can be used at table level PostgreSQL supports security policies for limiting access at row level by default, all rows of a table are visible once RLS is enabled on a table, all queries must go through the security policy security policies are controlled by DBA rather than application RLS offers stronger security as it is enforced by the database Example: CREATE TABLE accounts (manager text, company text, contact_email text); ALTER TABLE accounts ENABLE ROW LEVEL SECURITY; To create a policy on the accounts table to allow the managers role to view the rows of their accounts, the CREATE POLICY command can be used: CREATE POLICY account_managers ON accounts TO managers USING (manager = current_user); To allow all users to view their own row in a user table, a simple policy can be used: CREATE POLICY user_policy ON users USING (user = current_user); Application access\u0026nbsp;# application acces is controlled by settings in both postgresql.conf and pg_hba.conf. set the following parameters in postgresql.conf: listen_addresses max_connections superuser_reserved_connections port Data redaction\u0026nbsp;# data redaction can be used to conceal data values from selected users the redaction function is incorporated into redaction policy using CREATE REDACTION POLICY. data redaction is controlled by edb_data_redaction configuration parameter useful for compliance to GDPR, PCI, and HIPAA standards ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-security/","tags":["edb"],"title":"EPAS Security"},{"categories":["notes"],"contents":"Show the command history. \\s Save the command history to a file, FILENAME. \\s FILENAME Edit the query buffer and then execute it. \\e Open the query buffer in a file, FILENAME, and execute it upon save. \\e FILENAME Save the query buffer to a file, FILENAME. \\w FILENAME Direct the output of the next command to file, FILENAME. \\o FILENAME Execute the query buffer and send output to file, FILENAME. \\g Run previous query repeatedly. \\watch \u0026lt;seconds\u0026gt; ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-query-buffer/","tags":["edb"],"title":"History, query buffer, and output control"},{"categories":["notes"],"contents":" Information commands\u0026nbsp;# \\d(i, s, t, v, b, S)[+] [pattern] lists information about indexes, sequences, tables, views, tablespaces or system objects. Any combination of letters may be used in any order, for example \\dvs + displays comments \\d[+] [pattern] for each relation describe/display the relation structure details + displays any comments associated with the columns of the table, and if the table has an OID column without a pattern, \\d[+] is equivalent to \\dtvs[+] \\l [+] list the names, owners, and character set encodings of all the databases in the server if + is appended to the command name, database descriptions are also displayed \\dn+ [pattern] lists schemas (namespaces) + adds permissions and description to output \\df+ [pattern] lists functions + adds owner, language, source code, and description to output Other common meta commands\u0026nbsp;# \\conninfo display current connection information \\q or ^d or quit or exit quits the edb-psql program \\cd [directory] changes the current working directory \\! [command] executes the specified system command if no command is specified, escapes to a separate Unix shell ex: print current working directory, \\! pwd Help commands\u0026nbsp;# \\? display list of all meta commands \\h [command] shows information about SQL commands if command isn\u0026rsquo;t specified, lists all SQL commands edb-psql --help lists command line options for edb-psql ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-common-meta/","tags":["edb"],"title":"Meta commands"},{"categories":["notes"],"contents":" Installation\u0026nbsp;# For Linux, install the edb-asxx-server-sqlprotect RPM package where xx is the EDB Postgres Advanced Server version number. yum install edb-as13-server-sqlprotect Note: After following the installation procedure in the EPAS13 RN, edb-as13-server-sqlprotect was already installed. Configuration\u0026nbsp;# Modify the postgresql.conf file\u0026nbsp;# # Shared Preload Libraries shared_preload_libraries = \u0026#39;$libdir/sqlprotect\u0026#39; # SQL/Protect settings edb_sql_protect.enabled = off edb_sql_protect.level = learn edb_sql_protect.max_protected_roles = 64 edb_sql_protect.max_protected_relations = 1024 edb_sql_protect.max_queries_to_save = 5000 ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-sql-protect/","tags":["edb"],"title":"SQL/Protect"},{"categories":["notes"],"contents":"Use \\set meta command to set a variable. =\u0026gt; \\set city Edmonton =\u0026gt; \\echo :city Edmonton Use \\unset to delete a variable. \\unset city ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-variables/","tags":["edb"],"title":"Variables"},{"categories":["notes"],"contents":" Creating schemas\u0026nbsp;# db1=# CREATE SCHEMA IF NOT EXISTS schema_name [ AUTHORIZATION role-specification] The role-specification here is the schema owner. It can be a user, group, or a role. In Postgres, a user is not a schema. A user is a global object which exists outside the database. Schemas are database level objects, so you must be connected to the target database before creating one. A schema is a collection of database tables, views, sequences, functions, and domains owned by a user. Benefits of schemas: A database can contain one or more named schemas By default, all databases contain a public schema There are several reason to use schemas to allow many users to use one database without interfereing with each other to organize database objects into logical groups to make them more manageable third-party applications can be put into separate shemas so they cannot collide with the names of other objects Example: if a depreciated application/user needs to be removed, its database schema can be dropped instead of dropping all its objects individually. Below is an example of creating a new database, new users, and new db schemas. edb=# edb=# CREATE USER user1 PASSWORD \u0026#39;1\u0026#39;; CREATE ROLE edb=# CREATE USER user2 PASSWORD \u0026#39;2\u0026#39;; CREATE ROLE edb=# CREATE USER user3 PASSWORD \u0026#39;3\u0026#39;; CREATE ROLE Creates user1, user2, and user3. Users, groups, and roles are the same thing in PostgreSQL, with the only difference being that users have permission to log in by default. The CREATE USER and CREATE GROUP statements are actually aliases for the CREATE ROLE statement. edb=# CREATE DATABASE db1; CREATE DATABASE Creates a database called db1. It is owned by the superuser, enterprisedb. edb=# REVOKE CONNECT ON DATABASE db1 FROM public; REVOKE This revokes connect privilege from everyone excluding the owner and superuser(s). edb=# GRANT CONNECT ON DATABASE db1 TO user1, user3; GRANT Grants connect privilege to user1 and user3; edb=# \\c db1 (psql 13.4.8, server 13.4.8) You are now connected to database \u0026#34;db1\u0026#34; as user \u0026#34;enterprisedb\u0026#34;. Connects to db1 in order to create schemas. db1=# \\dn List of schemas Name | Owner --------+-------------- public | enterprisedb (1 row) Shows list of schemas. The public schema owned by enterprisedb should be the only one listed at this point. db1=# CREATE SCHEMA IF NOT EXISTS user1 AUTHORIZATION user1; CREATE SCHEMA db1=# CREATE SCHEMA IF NOT EXISTS user3 AUTHORIZATION user3; CREATE SCHEMA Creates a schema user1 owned by the user/role user1 and the same for user3. db1=# \\dn List of schemas Name | Owner --------+-------------- public | enterprisedb user1 | user1 user3 | user3 (3 rows) The list of schemas should now include user1 and user3. db1=# \\c db1 user3 Password for user user3: psql (13.10.14, server 13.10.14) You are now connected to database \u0026#34;db1\u0026#34; as user \u0026#34;user3\u0026#34;. Connects to db1 as user3. db1=\u0026gt; CREATE TABLE t1(i varchar); CREATE TABLE db1=\u0026gt; INSERT INTO t1 values(\u0026#39;this is user3 data in t1\u0026#39;); INSERT 0 1 Creates table and inserts a row. db1=\u0026gt; \\dt List of relations Schema | Name | Type | Owner --------+------+-------+------- user3 | t1 | table | user3 (1 row) db1=\u0026gt; \\c db1 user1 Password for user user1: psql (13.10.14, server 13.10.14) You are now connected to database \u0026#34;db1\u0026#34; as user \u0026#34;user1\u0026#34;. db1=\u0026gt; create table t1(i varchar); CREATE TABLE db1=\u0026gt; create table t2(i varchar); CREATE TABLE db1=\u0026gt; INSERT INTO t1 values(\u0026#39;this is user1 data in table t1\u0026#39;); INSERT 0 1 db1=\u0026gt; INSERT INTO t2 values(\u0026#39;this is user1 data in table t2\u0026#39;); INSERT 0 1 db1=\u0026gt; \\dt List of relations Schema | Name | Type | Owner --------+------+-------+------- user1 | t1 | table | user1 user1 | t2 | table | user1 (1 row) Similar actions connected as user1. Notice how the two t1 tables do not interfere because they exists in separate schemas. Schema search path\u0026nbsp;# The schema search path determines which schemas are searched for matching table names. It is used when fully qualified object names are not used in a query. Example: The following statement will find the first employee table from the schemas listed in the search path. SELECT * FROM employee; Default search path. Schema $user will automatically be replaced with the current user. db1=# SHOW search_path; search_path ----------------- \u0026#34;$user\u0026#34;, public (1 row) Setting the search path. SET search_path TO schema1, schema2, public ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-schemas/","tags":["EDB"],"title":"EDB schemas"},{"categories":["notes"],"contents":" Common connection problems\u0026nbsp;# Could not connect to Server - Connection refused This error occurs when either the database server isn\u0026rsquo;t running or the server isn\u0026rsquo;t configured to accept external TCP/IP connections FATAL - no ph_hba.conf entry This means your server can be contacted over the network, but is not configured to accept the connection. Your client is not detected as a legal user for the database:wq ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-pem/","tags":["EDB","PEM"],"title":"EDB Postgres Enterprise Manager"},{"categories":["notes"],"contents":" User profiles (password attributes)\u0026nbsp;# A profile is a named set of password attributes User profiles can be used to manage account status and password expiration The default profile is assigned to all users User profiles provide the following security features Attribute Value FAILED_LOGIN_ATTEMPTS UNLIMITED PASSWORD_LOCK_TIME UNLIMITED PASSWORD_LIFE_TIME UNLIMITED PASSWORD_GRACE_TIME UNLIMITED PASSWORD_REUSE_TIME UNLIMITED PASSWORD_REUSE_MAX UNLIMITED PASSWORD_GRACE_TIME UNLIMITED PASSWORD_VERIFY_FUNCTION NULL View a user profile\u0026nbsp;# edb=# select * from dba_profiles where profile=\u0026#39;DEFAULT\u0026#39;; profile | resource_name | resource_type | limit | common ---------+--------------------------+---------------+-----------+-------- DEFAULT | FAILED_LOGIN_ATTEMPTS | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_ALLOW_HASHED | PASSWORD | YES | NO DEFAULT | PASSWORD_GRACE_TIME | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_LIFE_TIME | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_LOCK_TIME | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_REUSE_MAX | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_REUSE_TIME | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_VERIFY_FUNCTION | PASSWORD | NULL | NO (8 rows) ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-user-profiles/","tags":["EDB"],"title":"EDB User Profile Management"}]