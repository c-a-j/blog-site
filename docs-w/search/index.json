[{"categories":["notes"],"contents":" Download archive\u0026nbsp;# Download from Oracle. Note: My Oracle Support account is required. Upload archive to target domain\u0026nbsp;# Upload the archive via WinSCP or other method. Stage archive and extract contents\u0026nbsp;# Move or copy the archive to /tmp mv dbsat.zip /tmp Log in as root and change ownership of the archive sudo -iu root cd /tmp chown oracle:oinstall dbsat.zip Log in as oracle and verify environment exit sudo -iu oracle env | grep ORA ORACLE_UNQNAME=orcl ORA_NLS10=/opt/oracle/product/19/db_1/nls/data ORACLE_SID=edba02t ORACLE_BASE=/opt/oracle ORACLE_TERM=xterm ORACLE_HOME=/opt/oracle/product/19/db_1 Create a dbsat directory mkdir /tmp/dbsat Extract the archive contents unzip /tmp/dbsat.zip -d /tmp/dbsat Unlock the system user\u0026nbsp;# sqlplus / as sysdba Note: If the alias exists, simply sql can be used alter user system identified by \"Myroot10%01Myroot10%04\"; alter user system account unlock; exit Collect report data\u0026nbsp;# mkdir /tmp/dbsat/reports cd /tmp/dbsat/reports bash /tmp/dbsat/dbsat collect -n system@${ORACLE_SID} \"${ORACLE_SID}_$(date +%Y-%m-%d)\" Generate readable report\u0026nbsp;# ./tmp/dbsat/dbsat report -n -a \"${ORACLE_SID}_$(date +%Y-%m-%d)\" Note: The above command will only work if you are generating the .html report on the same day that the data was collected. Otherwise you will need to manually replace ${ORACLE_SID}_$(date +%Y-%m-%d) with the filename. Copy report to p-account home\u0026nbsp;# Change permissions of the .html report file chmod 777 \"${ORACLE_SID}_$(date +%Y-%m-%d)_report.html\" exit cp /tmp/dbsat/reports/REPORT_NAME ~/wherever/you/want/ Note: Replace REPORT_NAME with the .html report filename and ~/wherever/you/want/ to your desired path. Automation idea\u0026nbsp;# We may be able to script this process and run it on an OEM console to get reports for every database all at once. ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/oracle/dbsat/","tags":["oracle","STIG"],"title":"Oracle DB Security Assessment Tool"},{"categories":["notes"],"contents":" Testing procedure overview\u0026nbsp;# There are three different maintenance scenarios that will be frequently encountered. Import SQL/Protect data from a backup to a newly restored database. this is possible per edb documentation Import SQL/Protect \u0026ldquo;learned\u0026rdquo; data from a dev/test cluster to a production cluster currently unclear if this is possible Import SQL/Protect \u0026ldquo;learned\u0026rdquo; data from a backup to a newly updated/patched database Scenario 1 is found explicitly in the EDB documentation, so testing for scenario 2 can reasonably serve for both 1 and 2. Scenario 3 will depend entirely on EDB maintaining SQL/Protect compatibility between versions, so this will not be tested until EPAS is upgraded. Scenario 2: Importing between clusters\u0026nbsp;# Step 1: Create test clusters\u0026nbsp;# Create a cluster to simulate development environment initdb -D ~/as13/data_db01d Create a cluster to simulate production environment initdb -D ~/as13/data_db01p Start both clusters pg_ctl -D ~/as13/data_db01d -o \"-p 5443\" start pg_ctl -D ~/as13/data_db01p -o \"-p 5444\" start Connecting to a cluster psql \"port=5443\" Step 2: Create databases, roles, and schemas\u0026nbsp;# Create database and roles. In this case there will be four user roles and a single group role. CREATE DATABASE db01d; CREATE USER user1 PASSWORD 'pw1'; CREATE USER user2 PASSWORD 'pw2'; CREATE USER user3 PASSWORD 'pw3'; CREATE USER user4 PASSWORD 'pw4'; CREATE ROLE group1 IDENTIFIED BY 'pwg1'; Ensure that new users (public schema) do not have the ability to connect by default via the public schema. REVOKE CONNECT ON DATABASE db01d FROM public; Grant the connect privilege to all newly created users. GRANT CONNECT ON DATABASE db1 TO user1, user2, user3, user4; Grant the group1 role to a specific set of users. GRANT group1 TO user2, user3; Connect to database to create schemas (reminder: schemas are db level objects). \\c db01d (psql 13.4.8, server 13.4.8) You are now connected to database \"db01d\" as user \"enterprisedb\". Create schemas for each user/role. CREATE SCHEMA IF NOT EXISTS user1 AUTHORIZATION user1; CREATE SCHEMA IF NOT EXISTS user2 AUTHORIZATION user2; CREATE SCHEMA IF NOT EXISTS user3 AUTHORIZATION user3; CREATE SCHEMA IF NOT EXISTS user4 AUTHORIZATION user4; CREATE SCHEMA IF NOT EXISTS group1 AUTHORIZATION group1; Grouped commands\u0026nbsp;# Create database and roles on development cluster. psql \"port=5443\" CREATE DATABASE db01d; CREATE USER user1 PASSWORD \u0026#39;pw1\u0026#39;; CREATE USER user2 PASSWORD \u0026#39;pw2\u0026#39;; CREATE USER user3 PASSWORD \u0026#39;pw3\u0026#39;; CREATE USER user4 PASSWORD \u0026#39;pw4\u0026#39;; CREATE ROLE group1 IDENTIFIED BY \u0026#39;pwg1\u0026#39;; REVOKE CONNECT ON DATABASE db01d FROM public; GRANT CONNECT ON DATABASE db01d TO user1, user2, user3, user4; GRANT group1 TO user2; GRANT group1 TO user3; \\c db01d; CREATE SCHEMA IF NOT EXISTS user1 AUTHORIZATION user1; CREATE SCHEMA IF NOT EXISTS user2 AUTHORIZATION user2; CREATE SCHEMA IF NOT EXISTS user3 AUTHORIZATION user3; CREATE SCHEMA IF NOT EXISTS user4 AUTHORIZATION user4; CREATE SCHEMA IF NOT EXISTS group1 AUTHORIZATION group1; CREATE TABLE group1.t1(i VARCHAR); GRANT INSERT ON group1.t1 TO user2; GRANT INSERT ON group1.t1 TO user3; Create database and roles on production cluster. psql \"port=5444\" CREATE DATABASE db01p; CREATE USER user1 PASSWORD \u0026#39;pw1\u0026#39;; CREATE USER user2 PASSWORD \u0026#39;pw2\u0026#39;; CREATE USER user3 PASSWORD \u0026#39;pw3\u0026#39;; CREATE USER user4 PASSWORD \u0026#39;pw4\u0026#39;; CREATE ROLE group1 IDENTIFIED BY \u0026#39;pwg1\u0026#39;; REVOKE CONNECT ON DATABASE db01p FROM public; GRANT CONNECT ON DATABASE db01p TO user1, user2, user3, user4; GRANT group1 TO user2; GRANT group1 TO user3; \\c db01p; CREATE SCHEMA IF NOT EXISTS user1 AUTHORIZATION user1; CREATE SCHEMA IF NOT EXISTS user2 AUTHORIZATION user2; CREATE SCHEMA IF NOT EXISTS user3 AUTHORIZATION user3; CREATE SCHEMA IF NOT EXISTS user4 AUTHORIZATION user4; CREATE SCHEMA IF NOT EXISTS group1 AUTHORIZATION group1; CREATE TABLE group1.t1(i VARCHAR); GRANT INSERT ON group1.t1 TO user2; GRANT INSERT ON group1.t1 TO user3; Step 3: Enable and configure SQL/Protect\u0026nbsp;# Modify the postgresql.conf file\u0026nbsp;# Development version (/as13/data_db01d/postgresql.conf): # Shared Preload Libraries shared_preload_libraries = \u0026#39;$libdir/sqlprotect\u0026#39; # SQL/Protect settings edb_sql_protect.enabled = on edb_sql_protect.level = learn edb_sql_protect.max_protected_roles = 64 edb_sql_protect.max_protected_relations = 1024 edb_sql_protect.max_queries_to_save = 5000 Production version (/as13/data_db01p/postgresql.conf): # Shared Preload Libraries shared_preload_libraries = \u0026#39;$libdir/sqlprotect\u0026#39; # SQL/Protect settings edb_sql_protect.enabled = on edb_sql_protect.level = active edb_sql_protect.max_protected_roles = 64 edb_sql_protect.max_protected_relations = 1024 edb_sql_protect.max_queries_to_save = 5000 Restart the database servers\u0026nbsp;# pg_ctl -D ~/as13/data_db01d -o \"-p 5443\" stop pg_ctl -D ~/as13/data_db01p -o \"-p 5444\" stop pg_ctl -D ~/as13/data_db01d -o \"-p 5443\" start pg_ctl -D ~/as13/data_db01p -o \"-p 5444\" start Run SQL/Protect script as superuser\u0026nbsp;# \\i /usr/edb/as13/share/contrib/sqlprotect.sql \\i /usr/edb/as13/share/contrib/sqlprotect.sql Add roles to the protected list\u0026nbsp;# Include the sqlprotect schema in the search path. SET search_path TO sqlprotect; Add roles to the protected list. SELECT protect_role('user1'); SELECT protect_role('user2'); SELECT protect_role('user3'); SELECT protect_role('user4'); SELECT protect_role('group1'); Enable expanded display. \\x Expanded display is on. View the protected roles with OIDs. SELECT * FROM edb_sql_protect; -[ RECORD 1 ]------+------ dbid | 16641 roleid | 16642 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f -[ RECORD 2 ]------+------ dbid | 16641 roleid | 16643 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f -[ RECORD 3 ]------+------ dbid | 16641 roleid | 16644 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f -[ RECORD 4 ]------+------ dbid | 16641 roleid | 16645 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f -[ RECORD 5 ]------+------ dbid | 16641 roleid | 16646 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f View the protected roles with object names. SELECT * FROM list_protected_users; -[ RECORD 1 ]------+------- dbname | db01d username | user1 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f -[ RECORD 2 ]------+------- dbname | db01d username | user2 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f -[ RECORD 3 ]------+------- dbname | db01d username | user3 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f -[ RECORD 4 ]------+------- dbname | db01d username | user4 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f -[ RECORD 5 ]------+------- dbname | db01d username | group1 protect_relations | t allow_utility_cmds | f allow_tautology | f allow_empty_dml | f Step 4: Run test suite\u0026nbsp;# Create tables with user1\u0026nbsp;# Connect as user1. \\c db01d user1 Password for user user1: psql (13.10.14, server 13.10.14) You are now connected to database \"db01d\" as user \"user1\". Create table CREATE TABLE t1(i varchar); Insert data into tables INSERT INTO t1 values('this is user3 data in user1.t1'); INSERT INTO user4.t1 values('this is more user4 data in user4.t1'); Create tables with user2\u0026nbsp;# \\c db01d user2 Password for user user2: psql (13.10.14, server 13.10.14) You are now connected to database \"db01d\" as user \"user2\". create table user2.t1(i VARCHAR); INSERT INTO user2.t1 values('this is user2 data in user2.t1'); INSERT INTO user2.t1 values('this is more user2 data in user2.t1'); INSERT INTO group1.t1 values('this is user2 data in group1.t1'); Create tables with user3\u0026nbsp;# \\c db01d user3 Password for user user3: psql (13.10.14, server 13.10.14) You are now connected to database \"db01d\" as user \"user3\". create table user3.t1(i VARCHAR); INSERT INTO user3.t1 values('this is user3 data in user3.t1'); INSERT INTO user3.t1 values('this is more user3 data in user3.t1'); INSERT INTO group1.t1 values('this is user3 data in group1.t1'); Create tables with user4\u0026nbsp;# \\c db01d user4 Password for user user4: psql (13.10.14, server 13.10.14) You are now connected to database \"db01d\" as user \"user4\". create table user4.t1(i VARCHAR); INSERT INTO user4.t1 values('this is user4 data in user4.t1'); INSERT INTO user4.t1 values('this is more user4 data in user4.t1'); Create tables script. \\c db01d user1; create table user1.t1(i VARCHAR); INSERT INTO user1.t1 values(\u0026#39;this is user1 data in t1\u0026#39;); INSERT INTO user1.t1 values(\u0026#39;this is more user1 data in t1\u0026#39;); \\c db01d user2; create table user2.t1(i VARCHAR); INSERT INTO user2.t1 values(\u0026#39;this is user2 data in user2.t1\u0026#39;); INSERT INTO user2.t1 values(\u0026#39;this is more user2 data in user2.t1\u0026#39;); INSERT INTO group1.t1 values(\u0026#39;this is user2 data in group1.t1\u0026#39;); \\c db01d user3; create table user3.t1(i VARCHAR); INSERT INTO user3.t1 values(\u0026#39;this is user3 data in user3.t1\u0026#39;); INSERT INTO user3.t1 values(\u0026#39;this is more user3 data in user3.t1\u0026#39;); INSERT INTO group1.t1 values(\u0026#39;this is user3 data in group1.t1\u0026#39;); \\c db01d user4; create table user4.t1(i VARCHAR); INSERT INTO user4.t1 values(\u0026#39;this is user4 data in user4.t1\u0026#39;); INSERT INTO user4.t1 values(\u0026#39;this is more user4 data in user4.t1\u0026#39;); Optional: enable active mode on development database\u0026nbsp;# Set edb_sql_protect.level = active in /as13/data_db01d/postgresql.conf. Reload /as13/data_db01d/postgresql.conf after modification. pg_ctl reload -D as13/data_db01d/ server signaled Step 5: Export SQL/Protect data\u0026nbsp;# SELECT sqlprotect.export_sqlprotect('/var/lib/edb/as13/backups/sqlprotect.dmp'); Step 6: Import SQL/Protect data into production\u0026nbsp;# For this test, there wasn\u0026rsquo;t any data in the SQL/Protect objects, but for a real import, data would need to be removed from the objects so that the OIDs can be corrected upon import. DELETE FROM sqlprotect.edb_sql_protect_rel; DELETE FROM sqlprotect.edb_sql_protect; Check for existing statistics. SELECT * FROM sqlprotect.edb_sql_protect_stats; If they do exist, drop them for each role. SELECT sqlprotect.drop_stats('user'); Check for existing offending queries. SELECT * FROM sqlprotect.edb_sql_protect_queries; If they do exist, drop them for each role. SELECT sqlprotect.drop_queries('user'); Step 7: Import SQL/Protect data\u0026nbsp;# Critical: the role names that were protected by SQL/Protect in the development cluster must exist in the production cluster. Step 8: Enable active mode\u0026nbsp;# Step 9: Run test suite\u0026nbsp;# Step 10: Run second test suit\u0026nbsp;# Run commands that will be blocked by SQL/Protect to ensure learned behavior has been transferred. ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/sql-protect/edb-backup-method/","tags":["edb","sql protect"],"title":"SQL/Protect - importing into db clone"},{"categories":["notes"],"contents":" Logical Backups\u0026nbsp;# pg_dump\u0026nbsp;# database level SQL dump does not backup users or tablespaces does not block readers or writers does not operate with special permissions pg_dump [options] [dbname] List options. pg_dump --help pg_dumpall\u0026nbsp;# cluster level SQL dump Physical Backups\u0026nbsp;# Copy using OS commands offline file system level backup Low Level API or pg_basebackup online file system level backup pg_basebackup uses replication technique to copy onto a media while server is in use automatically puts server in backup mode before backup and turns it off after backup ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-backup-recovery/","tags":["template"],"title":"Backup, recovery, and PITR"},{"categories":["notes"],"contents":" Create the clusters\u0026nbsp;# initdb -D /path/to/datadb1 initdb -D /path/to/datadb2 Start/stop the instances\u0026nbsp;# Start pg_ctl -D /path/to/datadb1 -o \"-p 5444\" -l /path/to/logdb1 start pg_ctl -D /path/to/datadb2 -o \"-p 5443\" -l /path/to/logdb2 start Stop pg_ctl -D /path/to/datadb1 -o \"-p 5444\" -l /path/to/logdb1 stop pg_ctl -D /path/to/datadb2 -o \"-p 5443\" -l /path/to/logdb2 stop Connect to a cluster\u0026nbsp;# psql \"port=5444\" ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-multi-cluster/","tags":["edb"],"title":"Multi Cluster Server"},{"categories":["notes"],"contents":" Data types\u0026nbsp;# Numeric Types Character Types Date/Time Types Other Types Advanced Server NUMERIC CHAR TIMESTAMP BYTEA CLOB INTEGER VARCHAR DATE BOOL BLOB SERIAL TEXT TIME MONEY VARCHAR2 INTERVAL XML NUMBER JSON XMLTYPE JSONB List all data types. \\dT * Structured Query Language\u0026nbsp;# Data Definition Language Data Manipulation Language Data Control Language Transaction Control Language CREATE INSERT GRANT COMMIT ALTER UPDATE REVOKE ROLLBACK DROP DELETE SAVEPOINT TRUNCATE SET TRANSACTION ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-sql-primer/","tags":["edb","sql"],"title":"SQL Primer"},{"categories":["docs"],"contents":" 1. Download and launch SuperPuTTY\u0026nbsp;# 1.1 Download\u0026nbsp;# Download the latest zip archive here. 1.2 Unzip the archive\u0026nbsp;# Unzip the archive and move it to somewhere within the C:\\Users\\{USERNAME} directory. For example, I decided to keep my SuperPuTTY files in C:\\Users\\ClintJordan\\bin, but feel free place them anywhere you like. 1.3 Change the SuperPuTTY icon and pin it\u0026nbsp;# The SuperPuTTY icon will probably be set to the default command prompt icon, which could be confusing if you ever actually use the command prompt. To change the icon, follow the steps below. Right click on the SuperPuTTY executable and click on Create Shortcut Right click on the new shortcut and click on Properties Under the Shortcut tab, click on Change Icon Click Browse Navigate to the PuTTY directory (likely C:\\Program Files\\PuTTY) Double click on the PuTTY executable Select the icon with two computers connected by a lightening bolt Click OK Click Apply then OK If you have PuTTY currently pinned to the taskbar, unpin it Double click on the new shortcut to open SuperPuTTY Right click on the taskbar SuperPuTTY icon and pin it Note: Feel free to choose any icon you like. I chose to use the PuTTY icon because after switching to SuperPuTTY, there aren\u0026rsquo;t any reasons to ever open the standard PuTTY again. More details on this below. 2. Session Configuration\u0026nbsp;# 2.1 Add and organize sessions\u0026nbsp;# There\u0026rsquo;s a few different ways to do this. File -\u0026gt; Import Sessions -\u0026gt; From PuTTY Settings Build a new session directory structure in the SuperPuTTY sessions window Hybrid 1 and 2 approach import all your saved PuTTY sessions organize all the sessions into a directory structure delete all the saved PuTTY profiles except the default modify all SuperPuTTY sessions to use the default PuTTY profile Option 1 will probably get you up and running the quickest. But options 2 and 3 lead to a much more efficient way of handling session settings. To illustrate the advantage of options 2 and 3, let\u0026rsquo;s say you\u0026rsquo;ve accumulated 100 saved PuTTY sessions over the years and now you\u0026rsquo;ve decided that the font size needs to increase. In PuTTY, you would have to load, increase the font size, and save the new settings for all 100 sessions individually. If you decided that the font type needs to change a few weeks later\u0026hellip;same story all over again. Option 1 alone does nothing to remedy this issue. On the other hand, if you have a little time to invest in options 2 or 3, you could reduce the number of saved PuTTY settings from 100 to 1. That\u0026rsquo;s right, you could change any setting in a single PuTTY profile and it will take effect in all 100 of your SuperPuTTY sessions. This tutorial will proceed assuming that you have taken the path of option 2. 2.1.1 Create session directory structure\u0026nbsp;# The sessions window should be visible by default. If it\u0026rsquo;s not visible, select View -\u0026gt; Sessions. Follow the steps below to start creating a session structure. Right click on PuTTY Sessions and select new folder create PROD, DEV, and TEST Create subdirectories within PROD, DEV, and TEST as a starting point, create a PALS folder under TEST Right click on the TEST/PALS folder and select New Session Name = nfs0207 (db) Host Name = fsxnfsx0207.wrk.fs.usda.gov PuTTY Session Profile = Default Settings Now just repeat that process for all new sessions. The above steps just outline a good example, feel free to organize and name sessions however you prefer. Alternatively, if you went with option 3 (the hybrid approach), drag your imported sessions into appropriate folders and then edit all of them so they use the default profile. Now your session window might look something like this: 2.1.2 Clean up PuTTY profiles\u0026nbsp;# It would be a good idea at this point to back up your sessions list. If your list is incomplete and you haven\u0026rsquo;t already done so, you might also want to import your PuTTY Sessions as well. They will populate in a separate folder. To import PuTTY sessions: File -\u0026gt; Import Sessions -\u0026gt; From PuTTY Settings To export SuperPuTTY sessions: File -\u0026gt; Export Sessions Now that all your sessions in SuperPuTTY are backed up and set to use the default session profile, you can simply delete all the now unnecessary PuTTY profiles and start fresh. Access the PuTTY Configurations through Tools -\u0026gt; PuTTY Configuration. Before you do this be sure that the default profile is set up the way you want! Take time to compare your most frequently used sessions to your default profile. Be sure to save everything you want in the default. After you have cleaned up, your PuTTY Configuration window should look like this: If you prefer to have the terminal styled differently depending on the host or type of work being performed, just save a few more general profiles. For example, if you want PROD, DEV, and TEST servers to have different background colors and/or fonts, you could create new profiles called PROD, DEV, and TEST starting with the default. After doing this the PuTTY configuration window would look like the screenshot below and there will be four different profiles to choose from in SuperPuTTY. 3. Set up CAPI authentication\u0026nbsp;# 3.1 Set auto-login username\u0026nbsp;# First, I recommend eliminating the need to type in your account name every time a new session is opened. Open the PuTTY Configurations Tools -\u0026gt; PuTTY Configuration from SuperPuTTY Load the default profile Navigate to Connection -\u0026gt; Data Insert your p-account into the Auto-login username text bar Navigate back to Session Highlight the default profile and click Save If you changed all the SuperPuTTY sessions to use the default profile as outlined in 2 Session Configuration, now your p-account will automatically be inserted when opening new sessions. The purpose of should now be very clear. Let\u0026rsquo;s take the efficiency a step further. 3.2 Configure CAPI authentication\u0026nbsp;# 3.2.1 Add CAPI keys to default PuTTY profile\u0026nbsp;# Open the PuTTY Configurations Load the default profile Navigate to Connection -\u0026gt; SSH -\u0026gt; Certificate Click on Set CAPI Cert Ensure that your certificate is chosen (you may have a list) Click OK Navigate back to Session Highlight the default profile and click Save Note: 3.2.1 must be repeated for all PuTTY profiles. Now open two new sessions, one in the production domain and the other in the dev/test domain. Repeat 3.2.2 - 3.2.4 for each domain. 3.2.2 Check for the existence of the ~/.ssh directory.\u0026nbsp;# $ ls -lad .ssh drwx------ 1 cjordan cjordan 4096 Feb 21 16:02 .ssh If you get ls: cannot access '.sshh': No such file or directory, then the directory must be created. $ mkdir ~/.ssh 3.2.3 Create the ~/.ssh/authorized_keys file.\u0026nbsp;# $ cat \u0026gt; ~/.ssh/authorized_keys After you hit enter on this command, the prompt will drop to the next line and wait for input. Now we must copy the CAPI public key from PuTTY. Open the PuTTY Configurations Load the default profile Navigate to Connection -\u0026gt; SSH -\u0026gt; Certificate Click on Copy to Clipboard Go back to the terminal window and paste in the clipboard contents, press Enter, then Ctrl+D. It should have looked something like this. $ cat \u0026gt; ~/.ssh/authorized_keys ssh-rsa gVVSvgd9lrPUY4rZIQsmDxsN6JljDI42GlgwVtQNxaek9KcLn9lEEC8R CAPI:69862ffda995 CN=JOHN DOE + OID.1.1=1200, OU=Department of Agriculture, O=U.S. Government, C=US Note: Your key will be much longer than this. I have stripped out many characters from mine for example. Output the ~/.ssh/authorized_keys file and check the contents. It might be a good idea to open a Notepad file and paste in the CAPI key for comparison. cat ~/.ssh/authorized_keys It should start with ssh-rsa and end with C=US. 3.2.4 Remove group permissions on ~/.ssh and ~/.ssh/authorized_keys.\u0026nbsp;# $ chmod 700 ~/.ssh $ chmod 600 ~/.ssh/authorized_keys Check the permissions. $ ls -lad ~/.ssh drwx------ 1 cjordan cjordan 4096 Feb 21 16:02 /home/cjordan/.ssh $ ls -la ~/.ssh/authorized_keys -rw------- 1 cjordan cjordan 546 Mar 2 16:18 authorized_keys If the previous steps were followed correctly, you should now be able to log into new SuperPuTTY sessions with your PIV credentials. Nifty! 4. Configure helpful hot keys\u0026nbsp;# 4.1 Moving through tabs\u0026nbsp;# When doing work in a terminal, it\u0026rsquo;s more efficient to switch over to the mouse as little as possible. To achieve this workflow in SuperPuTTY, we need to set a few hot keys. Tools -\u0026gt; Options -\u0026gt; Shortcuts Look for two items in this window, NextTab and PrevTab. Set them to whatever you like. For example, I have mine set to Ctrl+. and Ctrl+, for NextTab and PrevTab, respectively. This might seem like a strange choice at first glance, but those are also the keys for \u0026gt; and \u0026lt;, which may make a little more sense. Additionally, I have tmux set up to change windows with those same keys, but using Alt instead of Ctrl. For some reason that is completely mysterious to me, SuperPuTTY allows for changing tabs while maintaining the cursor focus in another tab. This means that it\u0026rsquo;s often possible to unintentionally send keys to tabs that you aren\u0026rsquo;t even looking at. For this reason, you may want to set another key to change focus to the visible tab to avoid having to switch to the mouse for a click. Go back to Tools -\u0026gt; Options -\u0026gt; Shortcuts and look for FocusActiveSession and set it to anything you like. I set mine to Ctrl+f. ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/docs/superputty-setup/","tags":["workflow","superputty"],"title":"SuperPuTTY Setup"},{"categories":["notes"],"contents":" Access control - pg_hba.conf\u0026nbsp;# host based access control file located in the cluster data directory read at startup, any change required reload contain set of records, one per line search record specifies connection type, database name, user name, client IP and method of authentication; top to bottom read hostnames, IPv6 and IPv4 supported authentication methods, trust, reject, md5, password, gss, sspi, krb5, ident, peer, pam, ldap, radius, bsd, scram or cert Row Level Security (RLS)\u0026nbsp;# GRANT and REVOKE can be used at table level PostgreSQL supports security policies for limiting access at row level by default, all rows of a table are visible once RLS is enabled on a table, all queries must go through the security policy security policies are controlled by DBA rather than application RLS offers stronger security as it is enforced by the database Example: CREATE TABLE accounts (manager text, company text, contact_email text); ALTER TABLE accounts ENABLE ROW LEVEL SECURITY; To create a policy on the accounts table to allow the managers role to view the rows of their accounts, the CREATE POLICY command can be used: CREATE POLICY account_managers ON accounts TO managers USING (manager = current_user); To allow all users to view their own row in a user table, a simple policy can be used: CREATE POLICY user_policy ON users USING (user = current_user); Application access\u0026nbsp;# application acces is controlled by settings in both postgresql.conf and pg_hba.conf. set the following parameters in postgresql.conf: listen_addresses max_connections superuser_reserved_connections port Data redaction\u0026nbsp;# data redaction can be used to conceal data values from selected users the redaction function is incorporated into redaction policy using CREATE REDACTION POLICY. data redaction is controlled by edb_data_redaction configuration parameter useful for compliance to GDPR, PCI, and HIPAA standards ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-security/","tags":["edb"],"title":"EPAS Security"},{"categories":["notes"],"contents":"Show the command history. \\s Save the command history to a file, FILENAME. \\s FILENAME Edit the query buffer and then execute it. \\e Open the query buffer in a file, FILENAME, and execute it upon save. \\e FILENAME Save the query buffer to a file, FILENAME. \\w FILENAME Direct the output of the next command to file, FILENAME. \\o FILENAME Execute the query buffer and send output to file, FILENAME. \\g Run previous query repeatedly. \\watch \u0026lt;seconds\u0026gt; ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-query-buffer/","tags":["edb"],"title":"History, query buffer, and output control"},{"categories":["notes"],"contents":" Information commands\u0026nbsp;# \\d(i, s, t, v, b, S)[+] [pattern] lists information about indexes, sequences, tables, views, tablespaces or system objects. Any combination of letters may be used in any order, for example \\dvs + displays comments \\d[+] [pattern] for each relation describe/display the relation structure details + displays any comments associated with the columns of the table, and if the table has an OID column without a pattern, \\d[+] is equivalent to \\dtvs[+] \\l [+] list the names, owners, and character set encodings of all the databases in the server if + is appended to the command name, database descriptions are also displayed \\dn+ [pattern] lists schemas (namespaces) + adds permissions and description to output \\df+ [pattern] lists functions + adds owner, language, source code, and description to output Other common meta commands\u0026nbsp;# \\conninfo display current connection information \\q or ^d or quit or exit quits the edb-psql program \\cd [directory] changes the current working directory \\! [command] executes the specified system command if no command is specified, escapes to a separate Unix shell ex: print current working directory, \\! pwd Help commands\u0026nbsp;# \\? display list of all meta commands \\h [command] shows information about SQL commands if command isn\u0026rsquo;t specified, lists all SQL commands edb-psql --help lists command line options for edb-psql ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-common-meta/","tags":["edb"],"title":"Meta commands"},{"categories":["notes"],"contents":" Exporting a schema\u0026nbsp;# pg_dump -p 5443 -d db01d -Fp -n sqlprotect -f sqlprotect.dmp Restoring a schema\u0026nbsp;# psql -p 5444 -d db01p -f sqlprotect.dmp ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-pgdump-pgrestore/","tags":["edb"],"title":"pg_dump and pg_restore"},{"categories":["notes"],"contents":" Testing procedure overview\u0026nbsp;# The intention of this test is to demonstrate that SQL/Protect data can be transferred between two EPAS database clusters, which will allow production servers to remain in active mode at all times. Most of the steps found in this test were taken directly from the edb documentation. Step 1: Cluster setup\u0026nbsp;# Create the clusters\u0026nbsp;# Create a cluster to simulate a production environment initdb -D ~/as13/data_p Create a cluster to simulate a development environment initdb -D ~/as13/data_d Modify the postgresql.conf files\u0026nbsp;# Append the following lines to the production version (/as13/data_p/postgresql.conf): # Shared Preload Libraries shared_preload_libraries = \u0026#39;$libdir/sqlprotect\u0026#39; # SQL/Protect settings edb_sql_protect.enabled = on edb_sql_protect.level = active edb_sql_protect.max_protected_roles = 64 edb_sql_protect.max_protected_relations = 1024 edb_sql_protect.max_queries_to_save = 5000 Append the following lines to the development version (/as13/data_d/postgresql.conf): # Shared Preload Libraries shared_preload_libraries = \u0026#39;$libdir/sqlprotect\u0026#39; # SQL/Protect settings edb_sql_protect.enabled = on edb_sql_protect.level = learn edb_sql_protect.max_protected_roles = 64 edb_sql_protect.max_protected_relations = 1024 edb_sql_protect.max_queries_to_save = 5000 Start the clusters\u0026nbsp;# Start both clusters pg_ctl -D ~/as13/data_p -o \"-p 5444\" start pg_ctl -D ~/as13/data_d -o \"-p 5443\" start Connect to a cluster\u0026nbsp;# Connecting to a cluster psql \"port=5444\" Ensure that SQL/Protect is enabled\u0026nbsp;# Production show shared_preload_libraries; shared_preload_libraries -------------------------- $libdir/sqlprotect (1 row) show edb_sql_protect.enabled; edb_sql_protect.enabled ------------------------- on (1 row) show edb_sql_protect.level; edb_sql_protect.level ----------------------- active (1 row) Development show shared_preload_libraries; shared_preload_libraries -------------------------- $libdir/sqlprotect (1 row) show edb_sql_protect.enabled; edb_sql_protect.enabled ------------------------- on (1 row) show edb_sql_protect.level; edb_sql_protect.level ----------------------- learn (1 row) Step 2: Create databases, roles, and schemas\u0026nbsp;# Production cluster\u0026nbsp;# Create database db01p CREATE DATABASE db01p; Connect to database \\c db01p Create the sqlprotect schema and objects \\i /usr/edb/as13/share/contrib/sqlprotect.sql Create user and schema create schema test; create user test; Protect the new role, test SELECT sqlprotect.protect_role('test'); View the protected users SELECT * FROM sqlprotect.list_protected_users; dbname | username | protect_relations | allow_utility_cmds | allow_tautology | allow_empty_dml ----------+----------+-------------------+--------------------+-----------------+----------------- cluster1 | test | t | f | f | f (1 row) Create tables create table test_table(i int); insert into test_table select generate_series(1,100); grant select on table test_table to test; create table another_test_table(i int); insert into another_test_table select generate_series(1,100); grant select on table another_test_table to test; Attempt to select from tables with user test set role test; select * from test_table limit 10; ERROR: SQLPROTECT: Illegal Query: relations select * from another_test_table limit 10; ERROR: SQLPROTECT: Illegal Query: relations Check the roleid for the user test SELECT usesysid FROM pg_user WHERE usename='test'; usesysid ---------- 16428 (1 row) View the protected roles with OIDs (Object IDs). SELECT * FROM sqlprotect.edb_sql_protect; dbid | roleid | protect_relations | allow_utility_cmds | allow_tautology | allow_empty_dml -------+--------+-------------------+--------------------+-----------------+----------------- 16384 | 16428 | t | f | f | f (1 row) View the protected roles with the object names. SELECT * FROM sqlprotect.list_protected_users; dbname | username | protect_relations | allow_utility_cmds | allow_tautology | allow_empty_dml --------+----------+-------------------+--------------------+-----------------+----------------- db01p | test | t | f | f | f (1 row) Set the protect_relations field to 'f' update sqlprotect.edb_sql_protect set protect_relations='f' where dbid=16384 and roleid=16428; UPDATE 1 Now attempt to select from the tables again select * from test_table limit 3; i ---- 1 2 3 (3 rows) select * from another_test_table limit 3; i ---- 1 2 3 (3 rows) Development cluster\u0026nbsp;# Create database db01d CREATE DATABASE db01d; Connect to database \\c db01d Create the sqlprotect schema and objects \\i /usr/edb/as13/share/contrib/sqlprotect.sql At this point, the two clusters are exactly the same down to the OIDs. For the development test cluster additional users and tables will be created to ensure that the OIDs between the objects of interest are different. create schema user1; create user user1; create schema user2; create user user2; create schema user3; create user user3; create schema test; create user test; Protect the new role, test SELECT sqlprotect.protect_role('test'); View the protected users SELECT * FROM sqlprotect.list_protected_users; dbname | username | protect_relations | allow_utility_cmds | allow_tautology | allow_empty_dml ----------+----------+-------------------+--------------------+-----------------+----------------- cluster1 | test | t | f | f | f (1 row) Create tables create table t1(i int); insert into t1 select generate_series(1,100); grant select on table t1 to user1; create table t2(i int); insert into t2 select generate_series(1,100); grant select on table t2 to user2; create table t3(i int); insert into t3 select generate_series(1,100); grant select on table t3 to user3; create table test_table(i int); insert into test_table select generate_series(1,100); grant select on table test_table to test; create table another_test_table(i int); insert into another_test_table select generate_series(1,100); grant select on table another_test_table to test; Execute queries with user test Note: it seems that a new psql session must be started before \u0026ldquo;learning\u0026rdquo; any behavior after protecting a role. \\q psql -p 5443 -d db01d -U test create table yet_another_test_table(i int); NOTICE: SQLPROTECT: This command type is illegal for this user CREATE TABLE db01d=\u003e insert into yet_another_test_table select generate_series(1,100); NOTICE: SQLPROTECT: Learned relation: 16453 INSERT 0 100 select * from test_table limit 3; NOTICE: SQLPROTECT: Learned relation: 16444 i --- 1 2 3 (3 rows) select * from another_test_table limit 3; NOTICE: SQLPROTECT: Learned relation: 16447 i --- 1 2 3 (3 rows) Check the roleid for the user test SELECT usesysid FROM pg_user WHERE usename='test'; usesysid ---------- 16434 (1 row) View the protected roles with OIDs (Object IDs). SELECT * FROM sqlprotect.edb_sql_protect; dbid | roleid | protect_relations | allow_utility_cmds | allow_tautology | allow_empty_dml -------+--------+-------------------+--------------------+-----------------+----------------- 16384 | 16434 | t | f | f | f (1 row) View the protected roles with the object names. SELECT * FROM sqlprotect.list_protected_users; dbname | username | protect_relations | allow_utility_cmds | allow_tautology | allow_empty_dml --------+----------+-------------------+--------------------+-----------------+----------------- db01d | test | t | f | f | f (1 row) Step 3: Export and Import\u0026nbsp;# Export data from development\u0026nbsp;# SELECT sqlprotect.export_sqlprotect('/var/lib/edb/as13/backups/sqlprotect.dmp'); export_sqlprotect ------------------- (1 row) Delete all SQL/Protect data from production\u0026nbsp;# db01p=# DELETE FROM sqlprotect.edb_sql_protect_rel; DELETE 0 db01p=# DELETE FROM sqlprotect.edb_sql_protect; DELETE 1 db01p=# SELECT * FROM sqlprotect.edb_sql_protect_stats; username | superusers | relations | commands | tautology | dml ----------+------------+-----------+----------+-----------+----- test | 0 | 3 | 0 | 0 | 0 (1 row) db01p=# SELECT sqlprotect.drop_stats(\u0026#39;test\u0026#39;); drop_stats ------------ (1 row) db01p=# SELECT * FROM sqlprotect.edb_sql_protect_stats; username | superusers | relations | commands | tautology | dml ----------+------------+-----------+----------+-----------+----- (0 rows) db01p=# SELECT * FROM sqlprotect.edb_sql_protect_queries; username | ip_address | port | machine_name | date_time | query ----------+------------+------+--------------+---------------------------+------------------------------------------------------------------- test | | | | 22-MAR-23 19:03:00 -05:00 | select * from another_test_table limit 10; test | | | | 22-MAR-23 19:03:00 -05:00 | SELECT r.rolname, r.rolsuper, r.rolinherit, + | | | | | r.rolcreaterole, r.rolcreatedb, r.rolcanlogin, + | | | | | r.rolconnlimit, r.rolvaliduntil, + | | | | | ARRAY(SELECT b.rolname + | | | | | FROM pg_catalog.pg_auth_members m + | | | | | JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) + | | | | | WHERE m.member = r.oid) as memberof + | | | | | , pg_catalog.shobj_description(r.oid, \u0026#39;pg_authid\u0026#39;) AS description+ | | | | | , r.rolreplication + | | | | | , r.rolbypassrls + | | | | | , r.rolprofile + | | | | | , edb_get_role_status(r.oid) + | | | | | , edb_get_password_expiry_date(r.oid) + | | | | | , r.rollockdate + | | | | | FROM pg_catalog.pg_roles r + | | | | | WHERE r.rolname !~ \u0026#39;^pg_\u0026#39; + | | | | | ORDER BY 1; test | | | | 22-MAR-23 19:03:00 -05:00 | select * from test_table limit 10; (3 rows) db01p=# SELECT sqlprotect.drop_queries(\u0026#39;test\u0026#39;); drop_queries -------------- 3 (1 row) db01p=# SELECT sqlprotect.import_sqlprotect(\u0026#39;/var/lib/edb/as13/backups/sqlprotect.dmp\u0026#39;); import_sqlprotect ------------------- (1 row) ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/sql-protect/edb-cluster-export-method/","tags":["edb","sql protect"],"title":"SQL/Protect - import/export between clusters"},{"categories":["notes"],"contents":"Use \\set meta command to set a variable. =\u0026gt; \\set city Edmonton =\u0026gt; \\echo :city Edmonton Use \\unset to delete a variable. \\unset city ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-variables/","tags":["edb"],"title":"Variables"},{"categories":["notes"],"contents":" Creating schemas\u0026nbsp;# db1=# CREATE SCHEMA IF NOT EXISTS schema_name [ AUTHORIZATION role-specification] The role-specification here is the schema owner. It can be a user, group, or a role. In Postgres, a user is not a schema. A user is a global object which exists outside the database. Schemas are database level objects, so you must be connected to the target database before creating one. A schema is a collection of database tables, views, sequences, functions, and domains owned by a user. Benefits of schemas: A database can contain one or more named schemas By default, all databases contain a public schema There are several reason to use schemas to allow many users to use one database without interfereing with each other to organize database objects into logical groups to make them more manageable third-party applications can be put into separate shemas so they cannot collide with the names of other objects Example: if a depreciated application/user needs to be removed, its database schema can be dropped instead of dropping all its objects individually. Below is an example of creating a new database, new users, and new db schemas. Create user1, user2, and user3. Users, groups, and roles are the same thing in PostgreSQL, with the only difference being that users have permission to log in by default. The CREATE USER and CREATE GROUP statements are actually aliases for the CREATE ROLE statement. CREATE USER user1 PASSWORD '1'; CREATE ROLE CREATE USER user2 PASSWORD '2'; CREATE ROLE CREATE USER user3 PASSWORD '3'; CREATE ROLE Create a database called db1. It is owned by the superuser, enterprisedb. edb=# CREATE DATABASE db1; CREATE DATABASE Revoke connect privilege from everyone excluding the owner and superuser(s). REVOKE CONNECT ON DATABASE db1 FROM public; REVOKE Grant connect privilege to user1 and user3; GRANT CONNECT ON DATABASE db1 TO user1, user3; GRANT Connect to db1 in order to create schemas. \\c db1 (psql 13.4.8, server 13.4.8) You are now connected to database \"db1\" as user \"enterprisedb\". Show list of schemas. The public schema owned by enterprisedb should be the only one listed at this point. \\dn List of schemas Name | Owner --------+-------------- public | enterprisedb (1 row) Create a schema user1 owned by the user/role user1 and the same for user3. CREATE SCHEMA IF NOT EXISTS user1 AUTHORIZATION user1; CREATE SCHEMA CREATE SCHEMA IF NOT EXISTS user3 AUTHORIZATION user3; CREATE SCHEMA The list of schemas should now include user1 and user3. \\dn List of schemas Name | Owner --------+-------------- public | enterprisedb user1 | user1 user3 | user3 (3 rows) Connect to db1 as user3. \\c db1 user3 Password for user user3: psql (13.10.14, server 13.10.14) You are now connected to database \"db1\" as user \"user3\". Create a table and insert a row. CREATE TABLE t1(i varchar); CREATE TABLE INSERT INTO t1 values('this is user3 data in t1'); INSERT 0 1 \\dt List of relations Schema | Name | Type | Owner --------+------+-------+------- user3 | t1 | table | user3 (1 row) \\c db1 user1 Password for user user1: psql (13.10.14, server 13.10.14) You are now connected to database \"db1\" as user \"user1\". create table t1(i varchar); CREATE TABLE create table t2(i varchar); CREATE TABLE INSERT INTO t1 values('this is user1 data in table t1'); INSERT 0 1 INSERT INTO t2 values('this is user1 data in table t2'); INSERT 0 1 \\dt List of relations Schema | Name | Type | Owner --------+------+-------+------- user1 | t1 | table | user1 user1 | t2 | table | user1 (1 row) Similar actions connected as user1. Notice how the two t1 tables do not interfere because they exists in separate schemas. Schema search path\u0026nbsp;# The schema search path determines which schemas are searched for matching table names. It is used when fully qualified object names are not used in a query. Example: The following statement will find the first employee table from the schemas listed in the search path. SELECT * FROM employee; Default search path. Schema $user will automatically be replaced with the current user. SHOW search_path; search_path ----------------- \"$user\", public (1 row) Setting the search path. SET search_path TO schema1, schema2, public; ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-schemas/","tags":["EDB"],"title":"EDB schemas"},{"categories":["notes"],"contents":" Common connection problems\u0026nbsp;# Could not connect to Server - Connection refused This error occurs when either the database server isn\u0026rsquo;t running or the server isn\u0026rsquo;t configured to accept external TCP/IP connections FATAL - no ph_hba.conf entry This means your server can be contacted over the network, but is not configured to accept the connection. Your client is not detected as a legal user for the database:wq ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-pem/","tags":["EDB","PEM"],"title":"EDB Postgres Enterprise Manager"},{"categories":["notes"],"contents":" User profiles (password attributes)\u0026nbsp;# A profile is a named set of password attributes User profiles can be used to manage account status and password expiration The default profile is assigned to all users User profiles provide the following security features Attribute Value FAILED_LOGIN_ATTEMPTS UNLIMITED PASSWORD_LOCK_TIME UNLIMITED PASSWORD_LIFE_TIME UNLIMITED PASSWORD_GRACE_TIME UNLIMITED PASSWORD_REUSE_TIME UNLIMITED PASSWORD_REUSE_MAX UNLIMITED PASSWORD_GRACE_TIME UNLIMITED PASSWORD_VERIFY_FUNCTION NULL View a user profile\u0026nbsp;# edb=# select * from dba_profiles where profile=\u0026#39;DEFAULT\u0026#39;; profile | resource_name | resource_type | limit | common ---------+--------------------------+---------------+-----------+-------- DEFAULT | FAILED_LOGIN_ATTEMPTS | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_ALLOW_HASHED | PASSWORD | YES | NO DEFAULT | PASSWORD_GRACE_TIME | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_LIFE_TIME | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_LOCK_TIME | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_REUSE_MAX | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_REUSE_TIME | PASSWORD | UNLIMITED | NO DEFAULT | PASSWORD_VERIFY_FUNCTION | PASSWORD | NULL | NO (8 rows) ","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/edb/edb-user-profiles/","tags":["EDB"],"title":"EDB User Profile Management"},{"categories":["notes"],"contents":"","permalink":"https://code.fs.usda.gov/pages/clint-jordan/site/notes/template/","tags":["template"],"title":"notes template"}]